image:
include everything (configration and settings) that application needs to run
=> (contains: a cut-down OS, Third-party libraries, Application files, Environment variables)

Container:
once we have image we can started from it
- Provides on isolated environment 
=> (what is happen in container will be invisible to another one)
- can be stopped & restart
- is just a process
=> (its spacial process coz it has it owns files)

image:
include everything (configration and settings) that application needs to run
=> (contains: a cut-down OS, Third-party libraries, Application files, Environment variables)

Container:
once we have image we can started from it
- Provides on isolated environment 
=> (what is happen in container will be invisible to another one)
- can be stopped & restart
- is just a process
=> (its spacial process coz it has it owns files)


image is essensially a collaction of layers so when docker want 
to create a image for us it excute every command (FROM, COPY, and so..)
first layer FROM node
second layer COPY ..
and so

check layer in terminal using docker history app-name

$docker history react-app
IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT
65cfdf311422   16 minutes ago   CMD ["/bin/sh" "-c" "npm start"]                0B        buildkit.dockerfile.v0
<missing>      16 minutes ago   EXPOSE map[3000/tcp:{}]                         0B        buildkit.dockerfile.v0
<missing>      16 minutes ago   ENV API_URL=http://api.myapp.com/               0B        buildkit.dockerfile.v0
<missing>      16 minutes ago   RUN /bin/sh -c npm install # buildkit           346MB     buildkit.dockerfile.v0
<missing>      16 minutes ago   COPY . . # buildkit                             2.06MB    buildkit.dockerfile.v0
<missing>      19 minutes ago   WORKDIR /app                                    0B        buildkit.dockerfile.v0
<missing>      19 minutes ago   USER app                                        0B        buildkit.dockerfile.v0
<missing>      19 minutes ago   RUN /bin/sh -c addgroup app && adduser -S -G…   4.84kB    buildkit.dockerfile.v0
<missing>      2 years ago      /bin/sh -c #(nop)  CMD ["node"]                 0B        
<missing>      2 years ago      /bin/sh -c #(nop)  ENTRYPOINT ["docker-entry…   0B        
<missing>      2 years ago      /bin/sh -c #(nop) COPY file:238737301d473041…   116B      
<missing>      2 years ago      /bin/sh -c apk add --no-cache --virtual .bui…   7.91MB    
<missing>      2 years ago      /bin/sh -c #(nop)  ENV YARN_VERSION=1.22.5      0B        
<missing>      2 years ago      /bin/sh -c addgroup -g 1000 node     && addu…   102MB     
<missing>      2 years ago      /bin/sh -c #(nop)  ENV NODE_VERSION=14.16.0     0B        
<missing>      2 years ago      /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B        
<missing>      2 years ago      /bin/sh -c #(nop) ADD file:3b16ffee2b26d8af5…   5.35MB  

when ask docker to build the image second time
he will check every layer and see if it changed it will build the layer again 
if not changed it will reuse it from cache


To optimized our build 
put the stable instructions up and changing instructions down

image is essensially a collaction of layers so when docker want 
to create a image for us it excute every command (FROM, COPY, and so..)
first layer FROM node
second layer COPY ..
and so

check layer in terminal using docker history app-name

$docker history react-app
IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT
65cfdf311422   16 minutes ago   CMD ["/bin/sh" "-c" "npm start"]                0B        buildkit.dockerfile.v0
<missing>      16 minutes ago   EXPOSE map[3000/tcp:{}]                         0B        buildkit.dockerfile.v0
<missing>      16 minutes ago   ENV API_URL=http://api.myapp.com/               0B        buildkit.dockerfile.v0
<missing>      16 minutes ago   RUN /bin/sh -c npm install # buildkit           346MB     buildkit.dockerfile.v0
<missing>      16 minutes ago   COPY . . # buildkit                             2.06MB    buildkit.dockerfile.v0
<missing>      19 minutes ago   WORKDIR /app                                    0B        buildkit.dockerfile.v0
<missing>      19 minutes ago   USER app                                        0B        buildkit.dockerfile.v0
<missing>      19 minutes ago   RUN /bin/sh -c addgroup app && adduser -S -G…   4.84kB    buildkit.dockerfile.v0
<missing>      2 years ago      /bin/sh -c #(nop)  CMD ["node"]                 0B        
<missing>      2 years ago      /bin/sh -c #(nop)  ENTRYPOINT ["docker-entry…   0B        
<missing>      2 years ago      /bin/sh -c #(nop) COPY file:238737301d473041…   116B      
<missing>      2 years ago      /bin/sh -c apk add --no-cache --virtual .bui…   7.91MB    
<missing>      2 years ago      /bin/sh -c #(nop)  ENV YARN_VERSION=1.22.5      0B        
<missing>      2 years ago      /bin/sh -c addgroup -g 1000 node     && addu…   102MB     
<missing>      2 years ago      /bin/sh -c #(nop)  ENV NODE_VERSION=14.16.0     0B        
<missing>      2 years ago      /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B        
<missing>      2 years ago      /bin/sh -c #(nop) ADD file:3b16ffee2b26d8af5…   5.35MB  

when ask docker to build the image second time
he will check every layer and see if it changed it will build the layer again 
if not changed it will reuse it from cache

To optimized our build 
put the stable instructions up and changing instructions down


Tag is only a label and docker enginge use "latest" keyword as defualt
ps: latest it doesn`t nessery refrens to latest version
"latest" is good for development but we should avoid in production (hard to debgug)
docker images
REPOSITORY     TAG       IMAGE ID       CREATED        SIZE
react-app      latest    65cfdf311422   8 hours ago    463MB

we can tag an image when we building it 
docker build -t react-app:1 

to untag an image
docker image remove react-app:1

to rename a tag 
docker build -t react-app:latest react-app:1 

rename a specific image {b03 is first three letters from IMAGE ID}
now we are set the latest tag to the new versoin
docker build -t b06 react-app:1 

when pushing our imgae to docker hub if didn`t specify the versoin docker hub will push the latest by defualt
if craete new tag 
docker build -t react-app:3
and want to push it we should previous it tag with user name docker hub


sharing and load the docker file with others locally
docker image save --help #=> to see the save option in detail

Usage:  docker image save [OPTIONS] IMAGE [IMAGE...]

Save one or more images to a tar archive (streamed to STDOUT by default)

Aliases:
  docker image save, docker save

Options:
  -o, --output string   Write to a file, instead of STDOUT




tar is like zip file in windows/mac but in linux
docker image save -o react-app.tar react-app:3







when loading the file

$ docker image load --help 

Usage:  docker image load [OPTIONS]

Load an image from a tar archive or STDIN

Aliases:
  docker image load, docker load

Options:
  -i, --input string   Read from tar archive file, instead of STDIN
  -q, --quiet          Suppress the load output





docker image load -i react-app.tar
